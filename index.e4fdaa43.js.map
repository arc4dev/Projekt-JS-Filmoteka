{"mappings":"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","sources":["src/js/searchMovie.js","src/js/pagination.js","src/js/getMoviesByGenre.js","src/index.js"],"sourcesContent":["import { getMovies } from './movies-list';\nimport { API_KEY, URL_SEARCH, API_LANGUAGE } from './config';\nimport { Notify } from 'notiflix';\nconst pagination = document.getElementById('pagination-container');\nconst genres = document.querySelector('.container-genres');\n\nexport async function searchMovie(page, searchValue) {\n  try {\n    let searchUrl = undefined;\n\n    if (searchValue !== '') {\n      searchUrl = `${URL_SEARCH}api_key=${API_KEY}&language=${API_LANGUAGE}&query=${searchValue.trim()}&page=${page}`;\n      pagination.classList.remove('is-hidden');\n    }\n\n    let data = await getMovies(page, searchUrl);\n\n    if (data.results.length === 0) {\n      Notify.failure('Nie ma filmów o takiej nazwie! Spróbuj ponownie...');\n      pagination.classList.add('is-hidden');\n      genres.classList.add('is-hidden');   \n    } else {\n      pagination.classList.remove('is-hidden');\n      genres.classList.remove('is-hidden');\n    }\n\n    return data;\n  } catch (err) {\n    throw err;\n  }\n}\n","import { state } from '../index';\nimport { renderMoviesList } from './movies-list';\nimport { searchMovie } from './searchMovie';\nimport { moviesContainer } from '../index';\nimport { renderLoadingSpinner } from './loadingSpinner';\n\nconst paginationContainer = document.querySelector('.pagination-container');\nconst maxButtonsToShow = 5;\n\nexport const changePage = async (page, query) => {\n  try {\n    renderLoadingSpinner(moviesContainer);\n    const { results: movies, total_pages } = await searchMovie(page, query);\n    state.page = page;\n    state.movies = movies;\n    state.totalPages = Math.min(total_pages, 10);\n\n    renderMoviesList(movies);\n    renderPaginationButtons(state.totalPages);\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const renderPaginationButtons = (maxTotalPages) => {\n  paginationContainer.innerHTML = '';\n  const startPage = calculateStartPage();\n  const endPage = calculateEndPage();\n  const buttonsHTML = generatePaginationButtonsHTML(\n    startPage,\n    endPage,\n    maxTotalPages\n  );\n  paginationContainer.innerHTML = buttonsHTML;\n  addClickEventListeners();\n};\n\nconst calculateStartPage = () => {\n  let startPage = state.page - Math.floor(maxButtonsToShow / 2);\n  if (state.totalPages <= maxButtonsToShow) {\n    startPage = 1;\n  } else if (\n    state.page >=\n    state.totalPages - Math.floor(maxButtonsToShow / 2)\n  ) {\n    startPage = Math.max(1, state.page - Math.floor(maxButtonsToShow / 2));\n  }\n  return Math.max(1, startPage);\n};\n\nconst calculateEndPage = () => {\n  let endPage = state.page + Math.floor(maxButtonsToShow / 2) - 1;\n  if (state.totalPages <= maxButtonsToShow) {\n    endPage = state.totalPages;\n  } else if (state.page <= Math.floor(maxButtonsToShow / 2)) {\n    endPage = maxButtonsToShow;\n  }\n  return Math.min(state.totalPages, endPage);\n};\n\nconst generatePaginationButtonsHTML = (startPage, endPage, totalPages) => {\n  let buttonsHTML = '';\n  if (startPage > 1) {\n    buttonsHTML += generatePaginationButtonHTML(1);\n    if (startPage > 2) {\n      buttonsHTML += `<span class=\"pagination-ellipsis\">...</span>`;\n    }\n  }\n  for (let i = startPage; i <= endPage; i++) {\n    buttonsHTML += generatePaginationButtonHTML(i);\n  }\n  if (endPage < totalPages) {\n    if (endPage < totalPages - 1) {\n      buttonsHTML += `<span class=\"pagination-ellipsis\">...</span>`;\n    }\n    buttonsHTML += generatePaginationButtonHTML(totalPages);\n  }\n  return buttonsHTML;\n};\n\nconst generatePaginationButtonHTML = (pageNumber) => {\n  return `<button class=\"pagination-button\" data-page=\"${pageNumber}\">${pageNumber}</button>`;\n};\n\nconst addClickEventListeners = () => {\n  const paginationButtons = document.querySelectorAll('.pagination-button');\n\n  paginationButtons.forEach((button) => {\n    button.addEventListener('click', function () {\n      const page = parseInt(button.dataset.page);\n      changePage(page, state.query);\n    });\n  });\n};\n","import axios from 'axios';\nimport { API_URL } from './config';\nimport { API_KEY } from './config';\nimport { API_LANGUAGE } from './config';\nimport { genresList } from './movies-list';\nimport { renderMoviesList } from './movies-list';\nimport { renderPaginationButtons } from './pagination';\nimport { state } from '..';\n\nexport const handleGenreClick = async (event) => {\n  const selectedGenre = event.target.textContent;\n  try {\n    const genresID = getGenreID(selectedGenre);\n    const movies = await getMoviesByGenre(genresID);\n    renderMoviesList(movies);\n    renderPaginationButtons();\n  } catch (err) {\n    console.error(err);\n  }\n};\nconst getGenreID = (genreName) => {\n  for (const genreID in genresList) {\n    if (genresList[genreID] === genreName) {\n      return genreID;\n    }\n  }\n};\nconst getMoviesByGenre = async (genresID) => {\n  try {\n    const response = await axios.get(\n      `${API_URL}discover/movie?api_key=${API_KEY}&language=${API_LANGUAGE}&with_genres=${genresID}&sort_by=popularity.desc`\n    );\n    return response.data.results;\n  } catch (err) {\n    throw err;\n  }\n};\n","import './sass/main.scss';\nimport { renderPaginationButtons } from './js/pagination';\nimport { handleGenreClick } from './js/getMoviesByGenre';\nimport './js/team-list';\nimport { getMovies, renderMoviesList } from './js/movies-list';\nimport { searchMovie } from './js/searchMovie';\nimport { renderLoadingSpinner } from './js/loadingSpinner';\nimport { popup, acceptCookies } from './js/cookies';\nimport { openModal, closeModal } from './js/details';\nimport './js/trailer';\n\n// VARIABLES\nconst searchForm = document.getElementById('search-form');\n\nexport const moviesContainer = document.querySelector('.covers-container');\nconst closeBtn = document.getElementById('close-modal');\nconst genresContainer = document.querySelector('.container-genres');\nconst genreLinks = genresContainer.querySelectorAll('.genres');\n\n// STATE\nexport const state = {\n  movies: [],\n  page: 1,\n  perPage: 20,\n  totalPages: 0,\n  query: '',\n};\n\n// FUNCTIONS\nconst renderTrendingMovies = async () => {\n  try {\n    // 1. Render loading spinner\n    renderLoadingSpinner(moviesContainer);\n    // 2. Get trending movies\n    const { results: movies, total_pages } = await getMovies(state.page);\n    // 3. Set movies in state\n    state.movies = movies;\n    state.totalPages = Math.min(total_pages, 10);\n    // 4. Render movies from state\n    renderMoviesList(state.movies);\n    // 5. Render pagination buttons\n    renderPaginationButtons(state.totalPages);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst renderSearchedMovies = async (e) => {\n  try {\n    e.preventDefault();\n    // 1. Get input value\n    const formInput = e.target.elements.searchInput;\n    if (!formInput) return;\n    // 2. Render loading spinner\n    renderLoadingSpinner(moviesContainer);\n    // 3. Get movies query\n\n    const { results: movies, total_pages } = await searchMovie(\n      state.page,\n      formInput.value\n    );\n    // 4. Set movies in state\n    state.movies = movies;\n    state.totalPages = Math.min(total_pages, 10);\n    state.query = formInput.value.trim();\n    // 5. Render movies from state\n    renderMoviesList(state.movies);\n    // 6. Render pagination buttons\n    renderPaginationButtons(state.totalPages);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n////////////////\n// START\n\n// Render trending movies on load\nif (searchForm) {\n  renderTrendingMovies();\n}\n\n// Render movies on search\nif (searchForm) {\n  searchForm.addEventListener('submit', renderSearchedMovies);\n}\n\n// Listeners\n\n// Open modal\nmoviesContainer.addEventListener('click', openModal);\n\n// Close modal\ncloseBtn.addEventListener('click', closeModal);\n\n// Filter movies by genre\ngenreLinks.forEach((link) => {\n  link.addEventListener('click', handleGenreClick);\n});\n"],"names":["$g2Y6z","parcelRequire","$cf9a3f707dae84db$var$pagination","document","getElementById","$cf9a3f707dae84db$var$genres","querySelector","async","$cf9a3f707dae84db$export$dd14e5c8db127693","page","searchValue","searchUrl","$epbGi","URL_SEARCH","API_KEY","API_LANGUAGE","trim","classList","remove","data","getMovies","results","length","$7IoHk","Notify","failure","add","err","$baa48fd5a30d32e8$var$paginationContainer","$baa48fd5a30d32e8$export$338bda8c3936cc17","maxTotalPages","innerHTML","startPage","$baa48fd5a30d32e8$var$calculateStartPage","endPage","$baa48fd5a30d32e8$var$calculateEndPage","buttonsHTML","$baa48fd5a30d32e8$var$generatePaginationButtonsHTML","$baa48fd5a30d32e8$var$addClickEventListeners","$1cb340a3d58589e5$export$ca000e230c0caa3e","Math","floor","$baa48fd5a30d32e8$var$maxButtonsToShow","totalPages","max","min","$baa48fd5a30d32e8$var$generatePaginationButtonHTML","i","pageNumber","querySelectorAll","forEach","button","addEventListener","query","$8fUuz","renderLoadingSpinner","$1cb340a3d58589e5$export$8ed86cdeb8b4cfd8","movies","total_pages","renderMoviesList","$baa48fd5a30d32e8$export$af04929cb32c4bb7","parseInt","dataset","$hGVxz","$0c5cfa85d5f4485b$export$ede7435fe9c506de","event","selectedGenre","target","textContent","genresID","$0c5cfa85d5f4485b$var$getGenreID","$0c5cfa85d5f4485b$var$getMoviesByGenre","console","error","genreName","genreID","genresList","default","get","API_URL","$1cb340a3d58589e5$var$searchForm","$1cb340a3d58589e5$var$closeBtn","$1cb340a3d58589e5$var$genreLinks","perPage","$1cb340a3d58589e5$var$renderTrendingMovies","e","preventDefault","formInput","elements","searchInput","value","$dDcbB","openModal","closeModal","link"],"version":3,"file":"index.e4fdaa43.js.map"}